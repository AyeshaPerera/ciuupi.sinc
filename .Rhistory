library(devtools)
load_all()
load_all()
document()
sinc_fn(5)
library(devtools)
load_all()
document()
sinc_fn(1)
.pkgenv <- new.env(parent = emptyenv())
.onLoad <- function(libname, pkgname) {
if (!exists("julia_initialized", envir = .pkgenv)) {
tryCatch({
julia <- JuliaCall::julia_setup(verbose = FALSE)
assign("julia_initialized", TRUE, envir = .pkgenv)
# Keep Julia session alive
JuliaCall::julia_command("Base.exit_on_sigint(false)")
# Ensure Julia doesn't exit on R exit
reg.finalizer(.pkgenv, function(e) JuliaCall::julia_command("exit()"), onexit = TRUE)
}, error = function(e) {
warning("Error setting up Julia: ", e$message)
})
}
}
if (!exists("julia_initialized", envir = .pkgenv)) {
tryCatch({
julia <- JuliaCall::julia_setup(verbose = FALSE)
assign("julia_initialized", TRUE, envir = .pkgenv)
# Keep Julia session alive
JuliaCall::julia_command("Base.exit_on_sigint(false)")
# Ensure Julia doesn't exit on R exit
reg.finalizer(.pkgenv, function(e) JuliaCall::julia_command("exit()"), onexit = TRUE)
}, error = function(e) {
warning("Error setting up Julia: ", e$message)
})
}
sinc_fn(1)
library(devtools)
load_all()
document()
sinc_fn(3)
pkgload::dev_help('sinc_fn')
julia_source("inst//julia//sinc_fn_julia.jl")
JuliaCall::julia_source("inst//julia//sinc_fn_julia.jl")
JuliaCall::julia_call("sinc_fn_julia", t)
t
t=1
JuliaCall::julia_call("sinc_fn_julia", t)
#' @description This module takes account of the difficulty in accurately computing sinc(t) using this formula for non-zero t very close to 0.
#'
#' @param t a number
#'
#' @importFrom JuliaCall julia_call
#'
#' @export
#'
#' @return sinc(t)
#'
sinc_fn <- function(t){
# JuliaCall::julia_source("inst//julia//sinc_fn_julia.jl")
# This module computes
# sinc(t) = sin(pi t) / (pi t) for t non-zero
#         = 1 for t=0.
# This module takes account of the difficulty
# in accurately computing sinc(t) using this
# formula for non-zero t very close to 0.
#
# Input
# t: a number
#
# Output
# sinc(t)
#
# Written by P.Kabaila in Dec 22
out <- JuliaCall::julia_call("sinc_fn_julia", t)
return(out)
}
sinc_fn(1)
b.knots.vec <- c(0.1,0.3,0.5,0.3,0.1)
t.vec <- seq(0, 5)
d <- 6
b_fn(t, b.knots.vec, t.vec, d)
#' @description This module takes account of the difficulty in accurately computing sinc(t) using this formula for non-zero t very close to 0.
#'
#' @param t a number
#'
#' @importFrom JuliaCall julia_call
#'
#' @export
#'
#' @return sinc(t)
#'
sinc_fn <- function(t){
# JuliaCall::julia_source("inst//julia//sinc_fn_julia.jl")
# This module computes
# sinc(t) = sin(pi t) / (pi t) for t non-zero
#         = 1 for t=0.
# This module takes account of the difficulty
# in accurately computing sinc(t) using this
# formula for non-zero t very close to 0.
#
# Input
# t: a number
#
# Output
# sinc(t)
#
# Written by P.Kabaila in Dec 22
out <- JuliaCall::julia_call("sinc_fn_julia", t)
return(out)
}
sinc_fn(1)
load_all()
sinc_fn(2)
t <- 1
b.knots.vec <- c(0.1,0.3,0.5,0.3,0.1)
t.vec <- seq(0, 5)
d <- 6
b_fn(t, b.knots.vec, t.vec, d)
julia_source("inst//julia//b_fn.jl")
JuliaCall::julia_source("inst//julia//b_fn.jl")
JuliaCall::julia_source("inst//julia//b_fn_julia.jl")
JuliaCall::julia_call("b_fn_julia", t, b.knots.vec, t.vec, d)
JuliaCall::julia_source("inst//julia//b_fn_julia.jl")
JuliaCall::julia_call("b_fn_julia", t, b.knots.vec, t.vec, d)
library(devtools)
load_all()
usethis::use_vignette("Description")
document()
load_all()
check()
library(devtools)
load_all()
check()
install.packages("ciuupi")
load_all()
document()
library(devtools)
load_all()
check()
library(devtools)
load_all()
check()
check()
library(ciuupi.sinc)
remove.packages("ciuupi.sinc")
install.packages("C:/Users/gperera@ltu.edu.au/OneDrive - LA TROBE UNIVERSITY/RESEARCH/ciuupi.sinc/03Oct24/ciuupi.sinc.zip", repos = NULL, type = "win.binary")
gamma.pm1.vec <- seq(-3, 3, 0.5)
gamma.p.vec <- seq(0, 5, 0.5)
alpha <- 0.05
install.packages("C:/Users/gperera@ltu.edu.au/OneDrive - LA TROBE UNIVERSITY/RESEARCH/ciuupi.sinc/03Oct24/ciuupi.sinc.zip", repos = NULL, type = "win.binary")
rho <- 0.6
alpha <- 0.05
bsc.list <- bsc_ciuupi_sinc(rho, alpha)
plot_b(bsc.list)
